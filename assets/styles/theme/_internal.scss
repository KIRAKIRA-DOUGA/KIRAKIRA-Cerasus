@use "sass:color";
@use "sass:map";
@use "sass:list";
@use "colors" as *;
@use "functions" as *;

// #region 主题色设定部分
/// 给定一个颜色值，可以是单个浅色主题颜色（深色主题颜色自动反转颜色获得），也可以是由浅色主题颜色和深色主题颜色组成的列表。
/// 根据当前的主题返回所需的颜色值。
/// @access private
/// @param {Color | List} $color - 颜色值。
/// @param {Bool} $is-light - 当前是否是浅色主题？
/// @return {Color} 返回所需的主题颜色。
@function themed-color($color, $is-light) {
	$light-color: null;
	$dark-color: null;

	@if type-of($value: $color) == list {
		$light-color: list.nth($color, 1);
		$dark-color: list.nth($color, 2);
	} @else {
		$light-color: $color;
		$dark-color: invert-lightness($color);
	}
	@return if($is-light, $light-color, $dark-color);
}

/// 生成十六进制表示的本色，或 RGB 三色的列表。
/// @access private
/// @param {String} $name - 颜色名称（Sass 映射键名）。
/// @param {Color} $color - 浅色主题的颜色，或是由浅色主题颜色和深色主题颜色组成的列表。
/// @param {Bool} $is-light - 当前是否是浅色主题？
/// @param {Bool} $is-rgb-list - 当前是否是 RGB 三色的列表？
/// @output $property, $property-rgb
@mixin hex-or-rgb-color($name, $color, $is-light, $is-rgb-list) {
	$property: key-to-css-var($name);
	$result-color: themed-color($color, $is-light);

	@if not $is-rgb-list {
		#{$property}: $result-color;
	} @else if color.alpha($result-color) == 1 { // 如果颜色固定为半透明色，则不要再生成 RGB 三色的列表了。
		#{$property}-rgb: color-to-rgb-list($result-color);
	}
}

/// 根据指定的键名确定是否生成波浪下划线链接背景。
/// @access private
/// @param {String} $key - 当前颜色键名。
/// @param {String} $color - 当前颜色值。
/// @param {Bool} $is-light - 当前是否是浅色主题？
/// @output --accent-hover-wave-link-background
@mixin wave-link($key, $color, $is-light) {
	@if map.get($state-colors, accent-hover) == $key {
		$svg-color: color-to-svg-color(themed-color($color, $is-light));
		--accent-hover-wave-link-background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 4'%3E%3Cpath fill='none' stroke='#{$svg-color}' d='M0 3.5c5 0 5-3 10-3s5 3 10 3 5-3 10-3 5 3 10 3'/%3E%3C/svg%3E");
	}
}
// #endregion

/// 在指定的位置上设定圆角大小。
/// @access private
/// @param {Number} $radius - 圆角大小。
/// @param {String} $position [full] - 圆角的位置。
/// @output border-radius
@mixin set-border-radius($radius, $position: full) {
	$positions: (
		top-left: $radius 0 0 0,
		left-top: $radius 0 0 0,
		top-right: 0 $radius 0 0,
		right-top: 0 $radius 0 0,
		bottom-right: 0 0 $radius 0,
		right-bottom: 0 0 $radius 0,
		bottom-left: 0 0 0 $radius,
		left-bottom: 0 0 0 $radius,
		top: $radius $radius 0 0,
		right: 0 $radius $radius 0,
		bottom: 0 0 $radius $radius,
		left: $radius 0 0 $radius,
		sharp-top-left: 0 $radius $radius $radius,
		sharp-left-top: 0 $radius $radius $radius,
		sharp-top-right: $radius 0 $radius $radius,
		sharp-right-top: $radius 0 $radius $radius,
		sharp-bottom-right: $radius $radius 0 $radius,
		sharp-right-bottom: $radius $radius 0 $radius,
		sharp-bottom-left: $radius $radius $radius 0,
		sharp-left-bottom: $radius $radius $radius 0,
		nwse: $radius 0, // 这种情况真不知道用什么词称呼，暂且用这个代替。
		nesw: 0 $radius 0, // 这种情况真不知道用什么词称呼，暂且用这个代替。
		full: $radius,
	);
	border-radius: map.get($positions, $position);
}

/// 强行指定光标声明。
/// @param {String} $tag - 光标的标识符名称。
/// @param {String} $cursor [null] - 光标值，也可以是自定义的光标。留空表示与标识符名称一致。
/// @output cursor
@mixin force-cursor($tag, $cursor: null) {
	@if not $cursor {
		$cursor: $tag;
	}

	body[data-cursor="#{$tag}"] {
		&,
		* {
			cursor: $cursor !important;
		}
	}
}
