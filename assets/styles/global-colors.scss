@use "theme/colors" as *;
@use "theme/internal" as *;

// 下面的内容是根据 Sass 映射自动转换为 CSS 属性的逻辑代码，不用动。

@for $i from 1 through 2 {
	$is-light: $i == 1;
	$force-color: force-color;
	$selector: if(
		$is-light,
		":root, .#{$force-color}, :root.light, .#{$force-color}.light",
		":root.dark, .#{$force-color}.dark"
	);

	#{$selector} {
		color-scheme: if($is-light, light, dark);
		accent-color: var(--accent);

		@each $colors in $neutral-colors, $grayscale-colors {
			@each $key, $color in $colors {
				@include hex-or-rgb-color($key, $color, $is-light);
			}
		}

		@if $is-light {
			@each $state, $color in $state-colors {
				@if type-of($color) != list {
					--#{$state}: #{c($color)};
				} @else {
					--#{$state}: #{c(list.nth($color, 1), list.nth($color, 2))};
				}
			}
		}

		@each $palette, $color in $secondary-colors {
			--#{"" + $palette}: #{$color};

			&.#{"" + $palette} {
				--accent-50: #{$color};
			}
		}

		@each $state, $colors in $mixed-colors {
			@if list.length($colors) >= 2 {
				$mixed-color: list.nth($colors, $i);

				@if list.length($mixed-color) == 1 {
					--#{$state}: #{$mixed-color};
				} @else {
					--#{$state}: color-mix(in oklab, var(--accent-50), #{$mixed-color});
				}
			}
		}

		// @include wave-link($key, $color, $is-light);
	}
}
