@use "theme/colors" as *;
@use "theme/internal" as *;

// 下面的内容是根据 Sass 映射自动转换为 CSS 属性的逻辑代码，不用动。

@for $i from 1 through 2 {
	$is-light: $i == 1;
	// force-color 用于强制指定某个元素的强调色以不跟随全局。
	// 它的存在是为了应对 CSS 变量的特性，不加这些在元素内直接覆盖 --accent 无法修改差分。
	// 此问答可供参考：https://segmentfault.com/q/1010000044508638
	$selector: if(
		$is-light,
		".light, .light .force-color",
		".dark, .dark .force-color"
	);

	#{$selector} {
		color-scheme: if($is-light, light, dark);
		accent-color: var(--accent);

		// 中性色和灰阶类颜色
		@each $colors in $neutral-colors, $grayscale-colors {
			@each $key, $color in $colors {
				@include hex-or-rgb-color($key, $color, $is-light);
			}
		}

		// 混合色（--accent 的差分）
		@if $is-light {
			@each $state, $color in $state-colors {
				@if type-of($color) != list {
					--#{$state}: #{c($color)};
				} @else {
					--#{$state}: #{c(list.nth($color, 1), list.nth($color, 2))};
				}
			}
		}


		@each $palette, $color in $secondary-colors {
			--#{"" + $palette}: #{$color};

			&.#{"" + $palette} {
				--accent-50: #{$color};
			}
		}

		// 混合色（--accent 的差分）
		@each $state, $colors in $mixed-colors {
			@if list.length($colors) >= 2 {
				$mixed-color: list.nth($colors, $i);

				@if list.length($mixed-color) == 1 {
					--#{$state}: #{$mixed-color};
				} @else {
					--#{$state}: color-mix(in oklab, var(--accent-50), #{$mixed-color});
				}
			}
		}

		// @include wave-link($key, $color, $is-light); // TODO: 波浪链接颜色样式暂时搁置。
	}
}
