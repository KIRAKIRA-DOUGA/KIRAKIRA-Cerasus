/**
 * @type {import('@volar/language-core').LanguageModule}
 */
module.exports = {
	createFile() { },
	updateFile() { },
	proxyLanguageServiceHost(host) {
		const ts = host.getTypeScriptModule();
		const nitroScript = {
			projectVersion: "",
			fileName: host.getCurrentDirectory() + "/.nuxt/types/nitro.d.ts",
			_version: 0,
			_snapshot: ts.ScriptSnapshot.fromString(""),
			get version() {
				this.update();
				return this._version;
			},
			get snapshot() {
				this.update();
				return this._snapshot;
			},
			update() {
				if (!host.getProjectVersion || host.getProjectVersion() !== this.projectVersion) {
					this.projectVersion = host.getProjectVersion?.() ?? "";
					const newText = this.generateText();
					if (newText !== this._snapshot.getText(0, this._snapshot.getLength())) {
						console.log(newText);
						this._version++;
						this._snapshot = ts.ScriptSnapshot.fromString(newText);
					}
				}
			},
			generateText() {
				const projectFileNames = host.getScriptFileNames().map(fileName => fileName.replace(host.getCurrentDirectory(), ""));
				const apiFiles = projectFileNames.filter(fileName => fileName.startsWith("/server/api") && fileName.endsWith(".ts"));
				const apiFileBasePaths = apiFiles.map(fileName => fileName.slice("/server/".length, -".ts".length));
				return `
					// Generated by nitro
					declare module '@nuxt/nitro' {
						type Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T
						interface InternalApi {
							${apiFileBasePaths.map(name => `'/${name}': Awaited<ReturnType<typeof import("../../server/${name}").default>>`).join(("\n"))}
						}
					}
					export {}
				`;
			},
		};

		return {
			getScriptFileNames() {
				return [
					...host.getScriptFileNames(),
					nitroScript.fileName,
				];
			},
			getScriptVersion(fileName) {
				if (fileName === nitroScript.fileName)
					return nitroScript.version;

				return host.getScriptVersion(fileName);
			},
			getScriptSnapshot(fileName) {
				if (fileName === nitroScript.fileName)
					return nitroScript.snapshot;

				return host.getScriptSnapshot(fileName);
			},
		};
	},
};
